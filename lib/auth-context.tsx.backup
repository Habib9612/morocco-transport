128G
"use client"

import React, { createContext, useContext, useState, useEffect } from 'react';
import { useI18n } from './i18n-context';

interface User {
  id: number;
  email: string;
  name: string;
  role?: string;
}

interface AuthContextType {
  user: User | null;
  loading: boolean;
  error: string | null;
  login: (email: string, password: string) => Promise<void>;
  signup: (email: string, password: string, name: string, role: string) => Promise<void>;
  logout: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | null>(null);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { t } = useI18n();

  const checkAuth = async () => {
    try {
      const response = await fetch('/api/auth/check', {
        credentials: 'include'
      });

      if (!response.ok) {
        throw new Error('Auth check failed');
      }

      const data = await response.json();
      setUser(data.user);
    } catch (err) {
      console.error('Auth check failed:', err);
      setUser(null);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    checkAuth();
  }, []);

  const login = async (email: string, password: string) => {
    setLoading(true);
    setError(null);

    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
        credentials: 'include'
      });

      const data = await response.json();
      if (!response.ok) {
        setError(data.error || 'Invalid credentials');
        setUser(null);
        return false;      }

      setUser(data.user);
      catch (err) {
        // Check for connection/network errors
        if (err instanceof Error && 
            (err.message.includes('network') || 
             err.message.includes('connection') || 
             err.message.includes('WebSocket'))) {
          setError('Connection error. Please try again later.');
        } else {
          setError((err as Error).message || 'Invalid credentials');
        }
n      setUser(null);
    } finally {
      setLoading(false);
    }
  };

  const signup = async (email: string, password: string, name: string, role: string) => {
    setLoading(true);
    setError(null);

    try {
      const signup = async (email: string, password: string, name: string, role: string): Promise<boolean> => {
        setLoading(true);
        setError(null);
        
        try {
          const response = await fetch('/api/auth/signup', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email, password, name, role }),
            credentials: 'include'
          });
    
          const data = await response.json();
          
          if (!response.ok) {
            setError(data.error || 'Email already exists');
            return false;
          }
          
          setUser(data.user);
          return true;
        } catch (err) {
          setError((err as Error).message || 'Email already exists');
          return false;
        } finally {
          setLoading(false);
      });
        // Check for connection/network errors
        if (err instanceof Error && 
            (err.message.includes('network') || 
             err.message.includes('connection') || 
             err.message.includes('WebSocket'))) {
          setError('Connection error. Please try again later.');
        } else {
          setError(err.message || 'Email already exists');
        }
        setUser(null);      setError((err as Error).message || 'Email already exists');
      setUser(null);
    } finally {
      setLoading(false);
    }
  };

  const logout = async () => {
    setLoading(true);
    setError(null);

    try {
      const response = await fetch('/api/auth/logout', {
        method: 'POST',
        credentials: 'include'
      });

      if (!response.ok) {
        throw new Error('Logout failed');
      }        throw new Error('Logout failed');
      }

      setUser(null);
      catch (err) {
        // Check for connection/network errors
        if (err instanceof Error && 
            (err.message.includes('network') || 
             err.message.includes('connection') || 
             err.message.includes('WebSocket'))) {
          setError('Connection error. Please try again later.');
        } else {
          setError((err as Error).message || 'Logout failed');
        }      setError((err as Error).message || 'Logout failed');
    } finally {
      setLoading(false);
    }
  };

  return (
    <AuthContext.Provider value={{ user, loading, error, login, signup, logout }}>
      {children}
    </AuthContext.Provider>
  );
};
