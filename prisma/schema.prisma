// This is your Prisma schema file,

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

enum UserRole {
  USER
  DRIVER
  ADMIN
  COMPANY
}

enum TruckStatus {
  AVAILABLE
  IN_TRANSIT
  MAINTENANCE
  OUT_OF_SERVICE
}

enum ShipmentStatus {
  PENDING
  CONFIRMED
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum FuelType {
  DIESEL
  GASOLINE
  ELECTRIC
  HYBRID
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Password reset fields
  resetToken       String?
  resetTokenExpiry DateTime?

  // Relations
  profile          UserProfile?
  trucks           Truck[]
  shipmentsSent    Shipment[] @relation("ShipmentSender")
  shipmentsReceived Shipment[] @relation("ShipmentReceiver")
  companies        Company[]
  reviews          Review[]
  reviewsReceived  Review[] @relation("DriverReviews")
  invoices         Invoice[]
  transactions     Transaction[]
  supportTickets   SupportTicket[]
  chatMessages     ChatMessage[]

  @@map("users")
}

model UserProfile {
  id           String  @id @default(cuid())
  userId       String  @unique
  address      String?
  city         String?
  postalCode   String?
  country      String  @default("Morocco")
  licenseNumber String?
  avatar       String?
  bio          String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Company {
  id          String  @id @default(cuid())
  name        String
  email       String  @unique
  phone       String?
  address     String?
  city        String?
  postalCode  String?
  country     String  @default("Morocco")
  taxId       String? @unique
  isVerified  Boolean @default(false)
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner     User       @relation(fields: [ownerId], references: [id])
  ownerId   String
  trucks    Truck[]
  shipments Shipment[]

  @@map("companies")
}

model Truck {
  id           String      @id @default(cuid())
  licensePlate String      @unique
  model        String
  make         String?
  year         Int
  capacity     Float       // in tons
  fuelType     FuelType    @default(DIESEL)
  status       TruckStatus @default(AVAILABLE)
  currentLocation String?
  lastMaintenance DateTime?
  nextMaintenance DateTime?
  mileage      Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  driver        User?     @relation(fields: [driverId], references: [id])
  driverId      String?
  company       Company?  @relation(fields: [companyId], references: [id])
  companyId     String?
  shipments     Shipment[]
    currentShipment Shipment? @relation("CurrentShipment", fields: [currentShipmentId], references: [id])
  currentShipmentId String? @unique
  maintenanceLogs MaintenanceLog[]
  fuelLogs      FuelLog[]

  @@map("trucks")
}

model Shipment {
  id              String         @id @default(cuid())
  trackingNumber  String         @unique
  status          ShipmentStatus @default(PENDING)
  
  // Pickup details
  pickupAddress   String
  pickupCity      String
  pickupPostal    String?
  pickupDate      DateTime?
  pickupContact   String?
  pickupPhone     String?
  
  // Delivery details
  deliveryAddress String
  deliveryCity    String
  deliveryPostal  String?
  deliveryDate    DateTime?
  deliveryContact String?
  deliveryPhone   String?
  
  // Shipment details
  weight          Float?         // in kg
  dimensions      String?        // JSON string with length, width, height
  description     String?
  specialInstructions String?
  
  // Pricing
  price           Float?
  currency        String         @default("MAD")
  isPaid          Boolean        @default(false)
  
  // Timing
  estimatedArrival DateTime?
  actualPickup    DateTime?
  actualDelivery  DateTime?
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  sender      User     @relation("ShipmentSender", fields: [senderId], references: [id])
  senderId    String
  receiver    User     @relation("ShipmentReceiver", fields: [receiverId], references: [id])
  receiverId  String
  truck       Truck?   @relation(fields: [truckId], references: [id])
  truckId     String?
  currentTruck Truck?  @relation("CurrentShipment")
  company     Company? @relation(fields: [companyId], references: [id])
  companyId   String?
  
  trackingEvents TrackingEvent[]
  documents     ShipmentDocument[]
  reviews       Review[]
  invoice       Invoice?

  @@map("shipments")
}

model TrackingEvent {
  id          String   @id @default(cuid())
  shipmentId  String
  event       String   // e.g., "PICKED_UP", "IN_TRANSIT", "DELIVERED"
  location    String?
  description String?
  timestamp   DateTime @default(now())

  shipment Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@map("tracking_events")
}

model ShipmentDocument {
  id         String   @id @default(cuid())
  shipmentId String
  type       String   // e.g., "INVOICE", "RECEIPT", "PHOTO"
  filename   String
  url        String
  uploadedAt DateTime @default(now())

  shipment Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@map("shipment_documents")
}

model MaintenanceLog {
  id          String   @id @default(cuid())
  truckId     String
  type        String   // e.g., "ROUTINE", "REPAIR", "INSPECTION"
  description String
  cost        Float?
  performedBy String?
  performedAt DateTime @default(now())
  nextDue     DateTime?

  truck Truck @relation(fields: [truckId], references: [id], onDelete: Cascade)

  @@map("maintenance_logs")
}

model FuelLog {
  id       String   @id @default(cuid())
  truckId  String
  amount   Float    // in liters
  cost     Float
  location String?
  mileage  Int?
  date     DateTime @default(now())

  truck Truck @relation(fields: [truckId], references: [id], onDelete: Cascade)

  @@map("fuel_logs")
}

model Route {
  id            String @id @default(cuid())
  name          String
  origin        String
  destination   String
  distance      Float? // in kilometers
  estimatedTime Int?   // in minutes
  tollCost      Float?
  fuelCost      Float?
  isActive      Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("routes")
}

model Review {
  id         String   @id @default(cuid())
  shipmentId String
  userId     String
  driverId   String?
  rating     Int      // 1-5 stars
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  shipment Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  driver   User?    @relation("DriverReviews", fields: [driverId], references: [id], onDelete: SetNull)

  @@unique([shipmentId, userId])
  @@map("reviews")
}

model Invoice {
  id          String   @id @default(cuid())
  shipmentId  String   @unique
  userId      String
  amount      Float
  currency    String   @default("MAD")
  status      InvoiceStatus @default(PENDING)
  dueDate     DateTime
  paidAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  shipment     Shipment      @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("invoices")
}

model Transaction {
  id          String   @id @default(cuid())
  invoiceId   String?
  userId      String
  amount      Float
  currency    String   @default("MAD")
  type        TransactionType
  status      TransactionStatus @default(PENDING)
  reference   String?  // Payment gateway reference
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  invoice Invoice? @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model SupportTicket {
  id          String   @id @default(cuid())
  userId      String
  subject     String
  description String
  status      TicketStatus @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  assignedTo  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ChatMessage[]

  @@map("support_tickets")
}

model ChatMessage {
  id               String   @id @default(cuid())
  supportTicketId  String?
  senderId         String
  receiverId       String?
  content          String
  isRead           Boolean  @default(false)
  createdAt        DateTime @default(now())

  supportTicket SupportTicket? @relation(fields: [supportTicketId], references: [id], onDelete: Cascade)
  sender        User           @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum TransactionType {
  PAYMENT
  REFUND
  FEE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
